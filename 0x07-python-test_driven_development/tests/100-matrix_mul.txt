100-matrix_mul module
======================

import function:
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

>>> matrix_mul()
Traceback (most recent call last):
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> matrix_mul(, [[1, 2], [3, 4]])
Traceback (most recent call last):
SyntaxError: invalid syntax

>>> matrix_mul([[1, 2, 3], [4, 5, 6]])
Traceback (most recent call last):
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

>>> matrix_mul(m_b=[[1, 2, 3], [4, 5, 6]])
Traceback (most recent call last):
TypeError: matrix_mul() missing 1 required positional argument: 'm_a'

>>> matrix_mul([[1, 2, 3], [4, 5, 6]],)
Traceback (most recent call last):
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

>>> matrix_mul([1, 2, 3], [[1, 2], [3, 4]])
Traceback (most recent call last):
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [1, 2, 3, 4, 5, 6])
Traceback (most recent call last):
TypeError: m_b must be a list of lists

>>> matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
ValueError: m_b can't be empty

>>> matrix_mul([[]], [[1, 2], [3, 4]])
Traceback (most recent call last):
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [[]])
Traceback (most recent call last):
ValueError: m_b can't be empty

>>> matrix_mul([["James", False, 2]], [[1, 2], [3, 4]])
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[1, 2], [3, 4]], [[4.5, 6, 1.4], [True, "China", 9]])
Traceback (most recent call last):
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[1, 2, 3], [4, 5]], [[1, 2, 3],[ 4, 5, 6]])
Traceback (most recent call last):
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[5, 6], [7, 8, 9]])
Traceback (most recent call last):
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
ValueError: m_a and m_b can't be multiplied

>>> matrix_mul([[5, "6"], [7, 8]], [[5, 6], [7, 8]])
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[5, 6, 10], [7, 8]], [[5, 6], [7, 8]])
Traceback (most recent call last):
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 8, 2]])
[[19, 22, 5], [43, 50, 11], [43, 50, 11]]

>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7,8]])
[[19, 22], [43, 50]]

>>> matrix_mul([[1.2, 2.5]], [[3.42, 4.3], [5.85, float("nan")]])
Traceback (most recent call last):
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[1.2, float("inf")]], [[3.42, 4.3], [5.85, 2]])
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats
